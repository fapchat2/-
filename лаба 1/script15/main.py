
# Напишите параметризированный декоратор pre_process, который
# осуществляет предварительную обработку (цифровую фильтрацию)
# списка по алгоритму: s[i] = s[i]–a∙s[i–1]. Параметр а можно задать в
# коде (по умолчанию равен 0.97). Пример кода:
# @pre_process(a=0.93)
# def plot_signal(s):
# for sample in s:
# print(sample)

#декоратор pre_process, который
# осуществляет предварительную обработку (цифровую фильтрацию)
# списка по алгоритму: s[i] = s[i]–a∙s[i–1]

# Декораторы – это языковое средство Python, позволяющее динамически
# модифицировать поведение уже существующей функции.
print("декоратор pre_process, который осуществляет предварительную обработку (цифровую фильтрацию) списка по алгоритму: s[i] = s[i]–a∙s[i–1]:")

def pre_process(a=0.97):
      
    def _decorator(func):# сюда вместо func перекинется plot_signal
              
        def _wrapper(s): # сюда вместо s перекинется [22, 33, 44]
           for i in range(len(s)):
             s[i] = s[i] - a * s[i-1]  #тут осуществляется предварительная обработка списка по алгоритму: s[i] = s[i]–a∙s[i–1]
           func(s)
                      
        return _wrapper
          
    return _decorator
  
# a=0.93
@pre_process(a=0.93)
def plot_signal(s):
  for sample in s:
    print(sample)    
      
plot_signal([22, 33, 44])
