# Напишите программу, имитирующую работу банкомата. Выберите
# структуру данных для хранения купюр разного достоинства в заданном
# количестве. При вводе пользователем запрашиваемой суммы денег,
# скрипт должен вывести на консоль количество купюр подходящего
# достоинства. Если имеющихся денег не хватает, то необходимо
# напечатать сообщение «Операция не может быть выполнена!».
# Например, при сумме 5370 рублей на консоль должно быть выведено
# « 5*1000 + 3*100 + 1*50 + 2*10 ».

from collections import OrderedDict

sum = input("Введи кол-во денег! ")
 
x=100
r = OrderedDict(((1000, x), (100, x), (50, x), (10, x)))#OrderedDict — это подкласс dict , который сохраняет порядок, в котором пары ключ-значение вставляются в него
def getMoney(sum):
        end = " "
        res = {1000: 0, 100: 0, 50: 0, 10: 0} #Множество в python - "контейнер", содержащий не повторяющиеся элементы в случайном порядке.
        for k, _ in r.items(): # items() Возвращает пары (ключ, значение) для каждого элемента словаря
            if sum == 0:
                break
            while r[k] > 0 and sum >= k: # этоот цикл заполнит множество res для того, чтобы в итоге стало понятно сколько и каких купюр банкомат выдаст 
              r[k] = r[k] - 1
              res[k] += 1
              sum -= k
            for key, value in res.items(): # это цикл для того, чтобы создать строку, которую в итоге выведем
              if (value != 0):
                end += str(value)
                end += "*"
                end += str(key)
                end += " + "
        if sum == 0: # сумма равна 0 -> все деньги уже в множестве res 
              print(end[:len(end)-3]) # вывод всей строки кроме последних 3х символов)
        else: # если в банкомате нет купюр, то операция не может быть выполнена
            print("«Операция не может быть выполнена!»")
        
getMoney(int(sum))
